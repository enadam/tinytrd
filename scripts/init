#!/bin/sh
#
# init -- single-pager init program
#
# It does little more than mounting the root file system.  All the main
# logic fits on a screen.

PATH="/root:/tinytrd:/usr/sbin:/usr/bin:/sbin:/bin";

source settings.sh;
using ROOT_DEV MOUNT_DIR;

# Run a command, like a shell with a controlling terminal, which enables
# job control.
with_ctty() {
	setsid cttyhack "$@";
}
 
# Launch an interactive shell for investigation.
shell() {
	echo;
	with_ctty sh -l;
	echo;
}

# Wait until $dev becomes available.
wait_for_dev() {
	local dev="$1";

	if [ ! -e "$dev" ];
	then	# Scan for $dev periodically.
		local msg="Waiting for $dev to come online";
		msg="$msg (^C to enter a subshell)...";
		echo -n "$msg";
		sleep 1;

		while [ ! -e "$dev" ];
		do	# Let the user interrupt the waiting
			# to intervene manually if necessary.
			echo -n .;
			if ! interruptible_sleep 1;
			then
				shell;
				echo -n "$msg";
			fi
		done
		echo;
	fi
}

# Use blkdev(8) to scan for $selector.  Returns the resolved $dev in $ret_var.
wait_for_dev_selector() {
	local selector="$1";
	local ret_var="$2";

	local dev=`blkid -t "$selector" -o device`;
	if [ $? -ne 0 ];
	then
		local msg="Waiting for device to come online";
		msg="$msg (^C to enter a subshell)...";
		echo -n "$msg";
		sleep 1;

		while :;
		do
			dev=`blkid -t "$selector" -o device`;
			[ $? -eq 0 ] \
				&& break;

			echo -n .;
			if ! interruptible_sleep 1;
			then
				shell;
				echo -n "$msg";
			fi
		done
		echo;
	fi

	# Return $dev in $ret_var if specified.
	[ -z "$ret_var" ] \
		|| eval $ret_var=\"$dev\";
}

# Main starts here.
mkdir -p /proc /dev "$MOUNT_DIR" /mnt /tmp /var/run;
mount -t proc		-o noexec,nosuid,nodev	proc /proc;
mount -t devtmpfs	-o nosuid		udev /dev;

call on_boot;

# Wait for $ROOT_DEV to become available.
if [ "$ROOT_DEV" != "" ];
then	# We have a concrete device to wait for.
	wait_for_dev "$ROOT_DEV";
else	# Export $ROOT_DEV for the scripts we call.
	using ROOT_DEV_SELECTOR;
	wait_for_dev_selector "$ROOT_DEV_SELECTOR" ROOT_DEV;
	export ROOT_DEV;
fi

# Run mount_root with a controlling TTY in case it needs to launch
# an interactive shell.
while ! with_ctty mount_root;
do	# We expect the script to try until it succeeds, but we need
	# to prepare for the unexpected, for example if it's killed
	# by SAK.
	interruptible_sleep 3 \
		|| shell;
done

call post_mount;

mount --move /dev  "$MOUNT_DIR/dev";
mount --move /proc "$MOUNT_DIR/proc";
mount -t tmpfs -o nosuid,nodev,size=10%,mode=0755 tmpfs "$MOUNT_DIR/run";

exec run-init "$MOUNT_DIR" /sbin/init;

# End of init
